#!/usr/bin/python3

#### Imports
import sys
import random
import os
import time
import subprocess

#### Import Custom Modules
import messcolor

user=os.getlogin()
path=('/home/'+user+'/apps/srt-connect-2')


def kill():
	killobe=os.system('docker rm -f obe-rt')
	messcolor.printc('inversered', 'OBE (encoder) Killed.')
	quit()

def createEntryPoint():
	messcolor.printc('inverseblue', '-------------- BUILDING TX ENVIRONMENT --------------')
	messcolor.printc('blue', "STARTING: Build OBE Entrypoint Script")
	######### Begin building entrypoint
	
	#### Parse data from selected config file 
	profile_filepath=(path + '/profiles/' + profile)
	print('looking for profile: {}'.format(profile))
	print('searching for profile: {}'.format(profile))


	from configparser import ConfigParser
	parser = ConfigParser()
	parser.read(profile_filepath)
	settings=dict(parser.items('txsettings'))
	setting={}
	setting['name']=(settings.get('name'))
	setting['description']=(settings.get('description'))
	setting['vidconnection']=(settings.get('vidconnection'))
	setting['systype']=(settings.get('systype'))
	setting['vvideoformat']=(settings.get('vvideoformat'))
	setting['vpid']=(settings.get('vpid'))
	setting['vvbv-maxrate']=(settings.get('vvbv-maxrate'))
	setting['vbitrate']=(settings.get('vbitrate'))
	setting['vkeyint']=(settings.get('vkeyint'))
	setting['vbframes']=(settings.get('vbframes'))
	setting['vthreads']=(settings.get('vthreads'))
	setting['vformat']=(settings.get('vformat'))
	setting['vprofile']=(settings.get('vprofile'))
	setting['vlevel']=(settings.get('vlevel'))
	setting['vaspect-ratio']=(settings.get('vaspect-ratio'))
	setting['vintra-refresh']=(settings.get('vintra-refresh'))
	setting['apid']=(settings.get('apid'))
	setting['abitrate']=(settings.get('abitrate'))
	setting['aformat']=(settings.get('aformat'))
	setting['aaac-profile']=(settings.get('aaac-profile'))
	setting['aaac-encap']=(settings.get('aaac-encap'))
	setting['pmt-pid']=(settings.get('pmt-pid'))
	setting['program-num']=(settings.get('program-num'))
	setting['pcr-pid']=(settings.get('pcr-pid'))
	setting['ts-id']=(settings.get('ts-id'))
	setting['ts-type']=(settings.get('ts-type'))
	setting['cbr']=(settings.get('cbr'))
	setting['lookahead']=(settings.get('lookahead'))
	setting['ts-muxrate']=(settings.get('ts-muxrate'))
	setting['outputmode']=(settings.get('outputmode'))
	setting['numoutputs']=(settings.get('numoutputs'))
	# messcolor.labelc('greenyellow','PROFILE NAME',setting['name'])
	# messcolor.labelc('greenyellow','DESCRIPTION',setting['description'])
	# messcolor.labelc('greenyellow','VID INPUT',setting['vidconnection'])
	# messcolor.labelc('greenyellow','SYSTEM TYPE',setting['systype'])
	# messcolor.labelc('greenyellow','VID FORMAT',setting['vvideoformat'])
	# messcolor.labelc('greenyellow','VID PID',setting['vpid'])
	# messcolor.labelc('greenyellow','VID MAX BIT',setting['vvbv-maxrate'])
	# messcolor.labelc('greenyellow','VID BITRATE',setting['vbitrate'])
	# messcolor.labelc('greenyellow','VID KEYINT',setting['vkeyint'])
	# messcolor.labelc('greenyellow','VID B-FRAMES',setting['vbframes'])
	# messcolor.labelc('greenyellow','VID THREADS',setting['vthreads'])
	# messcolor.labelc('greenyellow','VID FORMAT',setting['vformat'])
	# messcolor.labelc('greenyellow','VID PROFILE',setting['vprofile'])
	# messcolor.labelc('greenyellow','VID LEVEL',setting['vlevel'])
	# messcolor.labelc('greenyellow','VID ASPECT',setting['vaspect-ratio'])
	# messcolor.labelc('greenyellow','VID INTRA',setting['vintra-refresh'])
	# messcolor.labelc('greenyellow','AUD PID',setting['apid'])
	# messcolor.labelc('greenyellow','AUD BITRATE',setting['abitrate'])
	# messcolor.labelc('greenyellow','AUD FORMAT',setting['aformat'])
	# messcolor.labelc('greenyellow','AAC PROFILE',setting['aaac-profile'])
	# messcolor.labelc('greenyellow','AAC ENCAP',setting['aaac-encap'])
	# messcolor.labelc('greenyellow','PMT PID',setting['pmt-pid'])
	# messcolor.labelc('greenyellow','PGM NUM',setting['program-num'])
	# messcolor.labelc('greenyellow','PCR PID',setting['pcr-pid'])
	# messcolor.labelc('greenyellow','TS TYPE',setting['ts-type'])
	# messcolor.labelc('greenyellow','CONSTANT BR',setting['cbr'])
	# messcolor.labelc('greenyellow','LOOKAHEAD',setting['lookahead'])
	# messcolor.labelc('greenyellow','TS ID',setting['ts-id'])
	# messcolor.labelc('greenyellow','TS MUXRATE',setting['ts-muxrate'])
	# messcolor.labelc('greenyellow','OUTPUT MODE',setting['outputmode'])
	# messcolor.labelc('greenyellow','NUM OUTPUTS',setting['numoutputs'])
	print('\n')


	## Build Entrypoint
	import stat
	filepath=(path + "/hostfiles/obe-entrypoint.sh")
	obe_send_file = open(filepath, "wb")
	obe_send_file.write(bytes("#!/bin/bash\n", 'UTF-8'))
	obe_send_file.write(bytes("NAME=obe\n", 'UTF-8'))
	obe_send_file.write(bytes("screen  -d -m -S $NAME obecli\n", 'UTF-8'))
	obe_send_file.write(bytes("sleep 2\n", 'UTF-8'))
	obe_send_file.write(bytes("screen -p 0 -S $NAME -X stuff $\"set input decklink" + r"\012" + "\"\n", 'UTF-8'))
	obe_send_file.write(bytes("screen -p 0 -S $NAME -X stuff $\"set input opts card-idx=0" + r"\012" +"\"\n", 'UTF-8'))
	obe_send_file.write(bytes("screen -p 0 -S $NAME -X stuff $\"set input opts video-format=%s" % setting['vvideoformat'] + r'\012' +'\"\n' , 'UTF-8'))
	obe_send_file.write(bytes("screen -p 0 -S $NAME -X stuff $\"set input opts video-connection=%s" % setting['vidconnection'] + r"\012" +"\"\n", 'UTF-8'))
	obe_send_file.write(bytes("screen -p 0 -S $NAME -X stuff $\"set input opts audio-connection=embedded" + r"\012" +"\"\n" ,'UTF-8'))
	obe_send_file.write(bytes("screen -p 0 -S $NAME -X stuff $\"set obe opts system-type=%s" % setting['systype'] + r"\012" +"\"\n", 'UTF-8'))
	obe_send_file.write(bytes("screen -p 0 -S $NAME -X stuff $\"probe input" + r"\012" +"\"\n", 'UTF-8'))
	obe_send_file.write(bytes("sleep 2\n", 'UTF-8'))

	obe_send_file.write(bytes('screen -p 0 -S $NAME -X stuff ', 'UTF-8'))
	obe_send_file.write(bytes('$\"set stream opts 0:pid=%s' % setting['vpid'] + ',' ,'UTF-8'))

	if(setting['systype'] == 'lowestlatency'):
		messcolor.printc('yellow','ALERT: video max biterate not set in lowlatency mode')
	else:
		obe_send_file.write(bytes('vbv-maxrate=%s' % setting['vvbv-maxrate'] + ',' ,'UTF-8'))
	
	if(setting['vthreads'] is not ''):
		obe_send_file.write(bytes('threads=%s' % setting['vthreads'] + ',' ,'UTF-8'))

	if(setting['vformat'] is not ''):
		obe_send_file.write(bytes('format=%s' % setting['vformat'] + ',' , 'UTF-8'))
	
	if(setting['vprofile'] is not ''):
		obe_send_file.write(bytes('profile=%s' % setting['vprofile'] + ',' , 'UTF-8'))
	
	if(setting['vlevel'] is not ''):
		obe_send_file.write(bytes('level=%s' % setting['vlevel'] + ',' , 'UTF-8'))
	
	if(setting['vaspect-ratio'] is not ''):
		obe_send_file.write(bytes('aspect-ratio=%s' % setting['vaspect-ratio'] + ',' , 'UTF-8'))
	
	if(setting['vintra-refresh'] is not ''):
		obe_send_file.write(bytes('intra-refresh=%s' % setting['vintra-refresh'] + ',' , 'UTF-8'))

	if(setting['vbitrate'] is not ''):
		obe_send_file.write(bytes('bitrate=%s' % setting['vbitrate'] ,'UTF-8'))

	obe_send_file.write(bytes( r'\012' + '\"\n' , 'UTF-8'))

	### Audio Settings
	obe_send_file.write(bytes('screen -p 0 -S $NAME -X stuff ', 'UTF-8'))
	obe_send_file.write(bytes('$\"set stream opts 1:pid=%s' % setting['apid'] + ',' ,'UTF-8'))

	if(setting['abitrate'] is not ''):
		obe_send_file.write(bytes('bitrate=%s' % setting['abitrate'],'UTF-8'))
		if(setting['aformat'] is not ''):
			obe_send_file.write(bytes(',','UTF-8'))
		else:
			obe_send_file.write(bytes( r'\012' +'\"\n' ,'UTF-8'))

	if(setting['aformat'] is not ''):
		obe_send_file.write(bytes('format=%s' % setting['aformat'],'UTF-8'))
		if(setting['aaac-profile'] is not ''):
			obe_send_file.write(bytes(',','UTF-8'))
		else:
			obe_send_file.write(bytes( r'\012' + '\"\n' ,'UTF-8'))

	if(setting['aaac-profile'] is not ''):
		obe_send_file.write(bytes('aac-profile=%s' % setting['aaac-profile'],'UTF-8'))
		if(setting['aaac-encap'] is not ''):
			obe_send_file.write(bytes(',','UTF-8'))
		else:
			obe_send_file.write(bytes( r'\012' + '\"\n' ,'UTF-8'))

	if(setting['aaac-encap'] is not ''):
		obe_send_file.write(bytes('aac-encap=%s' % setting['aaac-encap'] + r'\012' +'\"\n','UTF-8'))

	## Muxer settings
	obe_send_file.write(bytes('screen -p 0 -S $NAME -X stuff ', 'UTF-8'))
	obe_send_file.write(bytes('$\"set muxer opts ts-id=%s' % setting['ts-id'] + ',' ,'UTF-8'))
	obe_send_file.write(bytes('program-num=%s' % setting['program-num'] + ',' ,'UTF-8'))
	obe_send_file.write(bytes('pmt-pid=%s' % setting['pmt-pid'] + ',' ,'UTF-8'))
	obe_send_file.write(bytes('ts-type=%s' % setting['ts-type'] + ',' ,'UTF-8'))
	obe_send_file.write(bytes('cbr=%s' % setting['cbr'] + ',' ,'UTF-8'))
	obe_send_file.write(bytes('ts-muxrate=%s' % setting['ts-muxrate'] + ',' ,'UTF-8'))
	obe_send_file.write(bytes('pcr-pid=%s' % setting['pcr-pid'],'UTF-8'))
	obe_send_file.write(bytes( r'\012' + '\"\n' ,'UTF-8'))

	##latency settings
	obe_send_file.write(bytes('screen -p 0 -S $NAME -X stuff ', 'UTF-8'))
	obe_send_file.write(bytes('$\"set stream opts 0:lookahead=' + setting['lookahead'] + ',','UTF-8'))
	obe_send_file.write(bytes('keyint=' + setting['vkeyint'] + ',','UTF-8'))
	obe_send_file.write(bytes('bframes=' + setting['vbframes'],'UTF-8'))
	obe_send_file.write(bytes( r'\012' + '\"\n' ,'UTF-8'))

	##bitrate
	obe_send_file.write(bytes('screen -p 0 -S $NAME -X stuff ', 'UTF-8'))
	obe_send_file.write(bytes('$\"set stream opts 0:bitrate=%s' % setting['vbitrate'] ,'UTF-8'))
	obe_send_file.write(bytes( r'\012' + '\"\n' , 'UTF-8'))

	##unicast output
	obe_send_file.write(bytes('screen -p 0 -S $NAME -X stuff ', 'UTF-8'))
	obe_send_file.write(bytes('$\"set outputs ' + setting['numoutputs'],'UTF-8'))
	obe_send_file.write(bytes( r'\012' + '\"\n' ,'UTF-8'))
	obe_send_file.write(bytes('screen -p 0 -S $NAME -X stuff ', 'UTF-8'))
	obe_send_file.write(bytes('$\"set output opts 0:','UTF-8'))
	obe_send_file.write(bytes('target=udp://234.252.0.'+channel+':8787,' ,'UTF-8'))
	obe_send_file.write(bytes('type=udp' ,'UTF-8'))
	obe_send_file.write(bytes( r'\012' + '\"\n' ,'UTF-8'))

	##start
	obe_send_file.write(bytes("screen -p 0 -S $NAME -X stuff $\"start" + r'\012' + "\"\n", 'UTF-8'))
	obe_send_file.write(bytes("screen -r\n", 'UTF-8'))
	obe_send_file.close()
	messcolor.printc('blue', "SUCCESS: Docker Entrypoint file created (hostfiles/obe-entrypoint.sh)")
	print('\n')

def buildDockerLauncher():
	messcolor.printc('blue', 'Contructing OBE Docker Launcher')
	from subprocess import call
	import stat
	obe_start_docker = open(path+"/hostfiles/start-obe-docker.sh", "wb")
	obe_start_docker.write(bytes("#!/bin/bash\n", 'UTF-8'))
	obe_start_docker.write(bytes("docker rm -f obe-rt\n", 'UTF-8'))
	obe_start_docker.write(bytes("docker run ", 'UTF-8'))
	obe_start_docker.write(bytes("--name=\"obe-rt\" ", 'UTF-8'))
	obe_start_docker.write(bytes("--network=\"split\" ", 'UTF-8'))
	obe_start_docker.write(bytes("--ip=\"10.0.10.2\" ", 'UTF-8'))
	obe_start_docker.write(bytes("-v "+ path + "/hostfiles:/home/hostfiles ", 'UTF-8'))
	obe_start_docker.write(bytes("--privileged -i -t -d ", 'UTF-8'))
	#obe_start_docker.write(bytes("--entrypoint=\"/bin/bash\" ", 'UTF-8'))
	obe_start_docker.write(bytes("--device /dev/blackmagic/io0 ", 'UTF-8'))
	obe_start_docker.write(bytes("pmw1/obe-rt \n", 'UTF-8'))
	obe_start_docker.close()
	os.chmod( path+'/hostfiles/start-obe-docker.sh', stat.S_IXOTH | stat.S_IREAD | stat.S_IWRITE | stat.S_IEXEC)
	messcolor.printc('blue', "SUCCESS: Docker launcher file created (hostfiles/start-obe-docker.sh)")
	print('\n')

def launchDocker():
	messcolor.printc('inverseblue', '---------------- ENCODING STARTED ------------------')
	obe=subprocess.Popen(path + '/hostfiles/start-obe-docker.sh', shell=True)
	obe=subprocess.Popen('echo && echo && echo && echo && echo ', shell=True)
	
	statusfile=open('{}/lastused'.format(path),'w+')
	statusfile.write('profile,{}\n'.format(profile))
	statusfile.close()



######## BEGIN RUNTIME ##########
if __name__ == "__main__":
	import argparse
	parser = argparse.ArgumentParser()
	parser.add_argument('--start', '-s', help="Start encoder")
	parser.add_argument('--channel', '-c', help="multicast channel to encode to. (defalut 1)")
	parser.add_argument('--profile', '-p', help="Encoding profile preset")
	parser.add_argument('--kill', '-k', help="set to \'1\' to kill encoder")
	args = parser.parse_args()
	profile = args.profile

	if args.kill == '1':
		kill()

	if args.profile is None:
		messcolor.printc('red','ERROR: Encoder requires a definition')
		messcolor.printc('yellow','Select a definition from the profiles folder and define with \'--profile\'')
		quit()

	if args.profile == 'lastused':
		with open('{}/lastused'.format(path),'r') as lastusedfile:
			for line in lastusedfile:
				element=line.split(',')
				if element[0]=='profile':
					profile=element[1].rstrip()
				else:
					pass
		lastusedfile.close()

		messcolor.printc('yellow','defaulting to last used {} profile...'.format(profile))

	if args.channel == None:
		channel="1"
		messcolor.printc('yellow','Channel not defined by user')
		messcolor.printc('green','Sourcing multicast channel: ' + channel)
	else:
		channel=args.channel
		messcolor.printc('green','Sourcing multicast channel: ' + channel)



createEntryPoint()
buildDockerLauncher()
launchDocker()

